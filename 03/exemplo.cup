import java_cup.runtime.*;

/*
=> init with {: ... :}
   Código que será inserido dentro do construtor da classe 
   do analisador sintático; por isso, executado no início. 
*/
init with {: 
  System.out.println("Resultado:");
:}

/* 
=> parser code {: ... :}:
   Permite incluir um método main() diretamente dentro da 
   classe do analisador sintático, dispensando a criação de 
   uma classe principal (Main) com o método main().

   O próprio analisador sintático será responsável por iniciar 
   a execução.
*/
parser code {:
  //Atributo da classe do analisador sintático:
  private String nomeDoArquivo;

  // Novo construtor personalizado do analisador sintático:
  public MeuParser(java_cup.runtime.Scanner meuScanner, String nomeDoArquivo) {
    super(meuScanner);
    this.nomeDoArquivo = nomeDoArquivo;
  }

  public static void main(String[] args) throws Exception {
    Compilador compilador = new Compilador();
    compilador.compilar(args[0]);
  }
:}

/*
=> action code {: ... :}
   Área para funções auxiliares, útil se quiser separar lógica.
*/
action code {:
  private Integer somar(Integer a, Integer b) {
    return a.intValue() + b.intValue();
  }

  private Integer subtrair(Integer a, Integer b) {
    return a.intValue() - b.intValue();
  }

  private Integer inverterSinal(Integer a) {
    return -a;
  }
:}

// Terminais
terminal DO, OUT, ACOLCH, FCOLCH, APARENT, FPARENT, PTVIRG, IGUAL, MENOR, MM;
terminal String ID;
terminal Integer INTEIRO;

// Não-Terminais
non terminal String programa, atribuicao, condicao, info, incremento, print, corpo;

start with programa;

programa ::= DO ACOLCH atribuicao:a PTVIRG condicao:b PTVIRG incremento:c FCOLCH corpo:d
           {: RESULT = "for (" + a + "; " + b + "; " + c + ") {\n  " + d + "\n}"; System.out.println(RESULT); :};

atribuicao ::= ID:a IGUAL info:i {: RESULT = "int " + a + " = " + i; :};

condicao ::= info:i1 MENOR info:i2 {: RESULT = i1 + " < " + i2; :};

incremento ::= ID:a MM {: RESULT = a + "++"; :};

info ::= ID:a {: RESULT = a; :}
       | INTEIRO:n {: RESULT = n.toString(); :};

print ::= OUT APARENT info:i FPARENT {: RESULT = "System.out.println(" + i + ");"; :};

corpo ::= print:p {: RESULT = p; :};
/*
Usar %prec:
  É importante quando um mesmo token tem dois significados 
  diferentes (como o - unário i binário).
  Evita conflitos de precedência.
  Garante a construção correta da árvore sintática i a avaliação da expressão.

=> Usar %prec MENOSUNARIO para informar:
   "Essa regra tem a precedência do token MENOSUNARIO, 
    que foi declarado separadamente na seção de precedência".
*/